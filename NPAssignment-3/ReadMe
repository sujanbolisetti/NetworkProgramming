-------------------------------------------------------------------------------------------------------------------------------
IMPLEMENTATION DETAILS
-------------------------------------------------------------------------------------------------------------------------------

We have implemented an On-Demand shortest hop Routing (ODR) protocol for routing messages in network of fixed but arbitrary and unknown network connectivity, using PF_PACKET sockets. We have used R_REQ and R_REPLY packets control packets to find route from one host to other host. We have used SOCK_RAW type sockets in our implementation. 

Scenario:
---------
Time server is started at well known port number on a host. Client needs to know present time from the server. Client has the necessary information of server such as server ip-address and port number. Now client calls an api msg_send() to send the packet to server. ODR takes control of the information given by client. ODR communicates it with server and reply of server is also pushed to client.


	Client					    Server
	  |					      |
	  |					      |
	  |					      |
	  |					      |
	 ODR----------> ODR ... ODR --------------> ODR
	    <----------     ...     <--------------

To send a packet to the server by the ODR at client end requires a mac-address of the server. To find this, client broadcasts a R_REQ (Route REQuest) packet which inturn is propagated by the ODRs in the network until it reaches the server. Server finds the packet is destined to it and generates a R_REPLY (Route REPLY) packet to the client. Each ODR which take part in this communication now has the client ODR mac address and route how to reach it and server ODR mac address and how to reach it. All these information is stored at each ODR as routing table which becomes handy when a packet has to be sent.

Client:
-------

On start of client, it asks for user input to which server (VM#) it should contact to get the time.

Client requests the present time from the server by calling a msg_send() function. This passes the necessary server information such as ip-address, well known port number to the ODR at client end. Then client waits on msg_recv() (a blocking function) expecting a packet from the server. Once a packet is received by the server when blocked on msg_recv(), it prints the time received from the server and waits for the input from user to which server it should contact next.

Even after the specific time interval, reply is not received by the client then it sends one more request enabling force discovery (assuming last packet is not received due to route failure) and blocks on msg_recv() again.

Server:
-------

Server starts in well known port which is already known to the client. It creates a pf_socket and blocks on msg_recv() expecting a packet from any client, once it receives a packet from the client it replies back the present time at the server using msg_send() function. Server gets the information of client from the packet it received.

ODR:
----

ODR process runs on each and every machine on a well known port number. ODR have 3 responsibilities (based on ODR location).

a. ODR at client end receives message from client and sends packet to server ODR based on information provided by the client. When the reply is received from the server, it sends the same message back to the client. ODR at client end generates R_REQ if the route to destination is not present else it sends packet to destination based on route it has.

b. ODR at server end receives message from any client and sends to server process. Server process receives a packet and sends reply to the ODR, this ODR uses the information present in the packet and sends the reply to the client ODR based on information it has in its routing table.

c. Apart from above duties, every ODR should support movement of the packets in the network. When a packet is received by the ODR, it checks the kind of packet and acts accordingly. All ODRs maintain routing table of its own, which contains the next hop address of all the destination ip's it can send a packet. Routing table is updated on each and every packet received by ODR if efficient route is found. ODRs repond differently to each type of packet it receives and whether the packet destination is itself or not.

i. If a packet type is R_REQ and it is the destination of the packet, then it sends corresponding R_REPLY to the sender of R_REQ. 
If the present ODR is not destination of packet and it has the route to destination and R_REPLY_ALREADY_SENT is not set in the packet, then it sends route information to sender and forwards the packet in the network (marks R_REPLY_ALREADY_SENT flag) based if the efficient route to source is found through the packet. If the packet is marked with force discovery bit is set then no intermediate responds with a route even though it has a route to destination and it forwards a packet.
If it is not destination of packet and route to destination is not present at this ODR, then it R_REQ forwards packet further from rest of interfaces it have than received interface.

ii. If a packet type is R_REPLY and it is the destination of packet then it forwards the payload of the packet using the received information.
If it is not the destination then it forwards the packet to source based on information it has in routing table.

iii. If a packet type is PAY_LOAD and it is the destination, then it forwards packet to client/ server it needs to send.
If it is not the destination then it forwards the packet to destination based on routing table information.

iv. If a packet type is PAY_LOAD/ R_REPLY but no route is exist in routing table, then ODR generates new R_REQ (for destination of received packet) for this packet and sends in the network and after it receives the R_REPLY packet then it forwards packet based on information it received.

Routing Table:
--------------
We maintained a routing table at each ODR to forward a packet to the destination. Each entry in the routing table has following fields:
a. Destination ip address
b. Next hop MAC address (to reach destination ip)
c. Time stamp (to find stale entries)
d. Hop count (number of hops b/w this ODR and destination)
e. Out going interface index (from which interface the packet has to be sent to reach destination ip)

Updating routing table on arrival of every packet if the route find is efficient than existing. Stale entries are removed from the routing table periodically. 

We have also implemented slateness parameter "0" in our project. If the staleness param is set to "0" then for every payload (data) packet ODR needs to sent should have a R_REQ for finding the route. When an R_Reply is received for the R_REQ, then the packet is sent to next hop address.

When force route discovery is enabled in the packet, irrespective of whether a route is efficient or not, route is updated as per newly available values. For your easiness, we print routing table at every update. Client enables force discovery, when reply is not received after specific time interval. Our time interval we set here is "3" seconds. 

